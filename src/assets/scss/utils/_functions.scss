// ==========================================================================
//   Functions.
// ==========================================================================

// *****************************************************************
// Parse Int
//
// Removes any unit a value may have.
// For use within mixins
//
// *****************************************************************

@function parseInt($n) {
    @return $n / ($n * 0 + 1);
}

// *****************************************************************
// Force unit
//
// Forces the value's unit to the given one.
// For use within mixins
//
// *****************************************************************

@function force-unit($value, $unit) {
    $value: parseInt($value);
    @return if($value == 0, 0, $value + $unit);
}

// *****************************************************************
// Map
//
// Applies the function to each argument in the given list.
// For use within mixins
//
// *****************************************************************

@function map($func, $list, $args...) {
    $new-list: ();
    @each $item in $list {
        $new-list: append($new-list, call($func, $item, $args...));
    }
    @return $new-list;
}

// *****************************************************************
// Multiply
//
// Multiplies x and y, if x is a number.
// For use within mixins
//
// *****************************************************************

@function multiply($x, $y) {
    @if type-of($x) == "number" {
        @return $x * $y;
    } @else {
        @return $x;
    }
}

// *****************************************************************
// Card shadow
//
// Computes a top-shadow and bottom-shadow for a card effect.
// @param {Number} $depth - depth level (between 1 and 5)
//
// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
// *****************************************************************

@function top-shadow($depth) {
    $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
    $blur: nth(1.5 3 10 14 19, $depth) * 4px;
    $color: rgba(black, nth(0.12 0.16 0.19 0.25 0.3, $depth));

    @return 0 $primary-offset $blur $color;
}

@function bottom-shadow($depth) {
    $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
    $blur: nth(1 3 3 5 6, $depth) * 4px;
    $color: rgba(black, nth(0.24 0.23 0.23 0.22 0.22, $depth));

    @return 0 $primary-offset $blur $color;
}

@mixin card($depth) {
    @if $depth < 1 {
        box-shadow: none;
    } @else if $depth > 5 {
        @warn "Invalid $depth `#{$depth}` for mixin `card`.";
    } @else {
        box-shadow: bottom-shadow($depth), top-shadow($depth);
    }
}

// *****************************************************************
// Slightly lighten a colour
//
// Computes a lighter colour.
// @param {Colour to tint, percentage of tint}
// @param {Number} $percentage - percentage of `$color` in returned color
// @return {Color}
//
// @link https://css-tricks.com/snippets/sass/tint-shade-functions/
// *****************************************************************
@function tint($color, $percentage) {
    @return mix(white, $color, $percentage);
}

// *****************************************************************
// Slightly darken a colour
//
// @access public
// @param {Color} $color - color to shade
// @param {Number} $percentage - percentage of `$color` in returned color
//
// @link https://css-tricks.com/snippets/sass/tint-shade-functions/
// *****************************************************************
@function shade($color, $percentage) {
    @return mix(black, $color, $percentage);
}
